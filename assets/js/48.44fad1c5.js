(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{470:function(t,a,e){"use strict";e.r(a);var s=e(13),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"signals"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#signals"}},[t._v("#")]),t._v(" Signals")]),t._v(" "),e("p",[e("Term",{attrs:{term:"signal",show:"Signals"}}),t._v(" provide a mechanism to send data directly to a running "),e("Term",{attrs:{term:"workflow"}}),t._v(". Previously, you had\ntwo options for passing data to the "),e("Term",{attrs:{term:"workflow"}}),t._v(" implementation:")],1),t._v(" "),e("ul",[e("li",[t._v("Via start parameters")]),t._v(" "),e("li",[t._v("As return values from "),e("Term",{attrs:{term:"activity",show:"activities"}})],1)]),t._v(" "),e("p",[t._v("With start parameters, we could only pass in values before "),e("Term",{attrs:{term:"workflow_execution"}}),t._v(" began.")],1),t._v(" "),e("p",[t._v("Return values from "),e("Term",{attrs:{term:"activity",show:"activities"}}),t._v(" allowed us to pass information to a running "),e("Term",{attrs:{term:"workflow"}}),t._v(", but this\napproach comes with its own complications. One major drawback is reliance on polling. This means\nthat the data needs to be stored in a third-party location until it's ready to be picked up by\nthe "),e("Term",{attrs:{term:"activity"}}),t._v(". Further, the lifecycle of this "),e("Term",{attrs:{term:"activity"}}),t._v(" requires management, and the "),e("Term",{attrs:{term:"activity"}}),t._v("\nrequires manual restart if it fails before acquiring the data.")],1),t._v(" "),e("p",[e("Term",{attrs:{term:"signal",show:"Signals"}}),t._v(", on the other hand, provide a fully asynchronous and durable mechanism for providing data to\na running "),e("Term",{attrs:{term:"workflow"}}),t._v(". When a "),e("Term",{attrs:{term:"signal"}}),t._v(" is received for a running "),e("Term",{attrs:{term:"workflow"}}),t._v(", Cadence persists the "),e("Term",{attrs:{term:"event"}}),t._v("\nand the payload in the "),e("Term",{attrs:{term:"workflow"}}),t._v(" history. The "),e("Term",{attrs:{term:"workflow"}}),t._v(" can then process the "),e("Term",{attrs:{term:"signal"}}),t._v(" at any time\nafterwards without the risk of losing the information. The "),e("Term",{attrs:{term:"workflow"}}),t._v(" also has the option to stop\nexecution by blocking on a "),e("Term",{attrs:{term:"signal"}}),t._v(" channel.")],1),t._v(" "),e("h2",{attrs:{id:"implement-signal-handler-in-workflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implement-signal-handler-in-workflow"}},[t._v("#")]),t._v(" Implement Signal Handler in Workflow")]),t._v(" "),e("p",[t._v("See the below example from "),e("a",{attrs:{href:"https://github.com/uber/cadence-java-samples/blob/master/src/main/java/com/uber/cadence/samples/hello/HelloSignal.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("sample"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloWorld")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@WorkflowMethod")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SignalMethod")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateGreeting")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" greeting"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloWorldImpl")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloWorld")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" greeting "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bye"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            logger"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" greeting "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" oldGreeting "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Workflow")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("await")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Objects")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldGreeting"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        logger"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" greeting "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateGreeting")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" greeting"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("greeting "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeting"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("The "),e("Term",{attrs:{term:"workflow"}}),t._v(" interface now has a new method annotated with @SignalMethod. It is a callback method that is invoked\nevery time a new "),e("Term",{attrs:{term:"signal"}}),t._v(' of "HelloWorld'),e("Term",{attrs:{term:""}}),t._v('updateGreeting" is delivered to a '),e("Term",{attrs:{term:"workflow"}}),t._v(". The "),e("Term",{attrs:{term:"workflow"}}),t._v(" interface can have only\none @WorkflowMethod which is a "),e("em",[t._v("main")]),t._v(" function of the "),e("Term",{attrs:{term:"workflow"}}),t._v(" and as many "),e("Term",{attrs:{term:"signal"}}),t._v(" methods as needed.")],1),t._v(" "),e("p",[t._v("The updated "),e("Term",{attrs:{term:"workflow"}}),t._v(" implementation demonstrates a few important Cadence concepts. The first is that "),e("Term",{attrs:{term:"workflow"}}),t._v(" is stateful and can\nhave fields of any complex type. Another is that the "),e("code",[t._v("Workflow.await")]),t._v(" function that blocks until the function it receives as a parameter evaluates to true. The condition is going to be evaluated only on "),e("Term",{attrs:{term:"workflow"}}),t._v(" state changes, so it is not a busy wait in traditional sense.")],1),t._v(" "),e("h2",{attrs:{id:"signal-from-command-line"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#signal-from-command-line"}},[t._v("#")]),t._v(" Signal From Command Line")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("cadence: "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --network"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host --rm ubercadence/cli:master --do test-domain workflow start  --workflow_id "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloSignal"')]),t._v(" --tasklist HelloWorldTaskList --workflow_type HelloWorld::sayHello --execution_timeout "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),t._v(" --input "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"World'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"\nStarted Workflow Id: HelloSignal, run Id: 6fa204cb-f478-469a-9432-78060b83b6cd\n')])])]),e("p",[t._v("Program output:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":53:56.120 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("workflow-root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" INFO  c.u.c.samples.hello.GettingStarted - "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(": Hello World"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),e("p",[t._v("Let's send a "),e("Term",{attrs:{term:"signal"}}),t._v(" using "),e("Term",{attrs:{term:"CLI",show:""}})],1),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("cadence: "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --network"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host --rm ubercadence/cli:master --do test-domain workflow signal --workflow_id "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloSignal"')]),t._v(" --name "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloWorld::updateGreeting"')]),t._v(" --input "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"Hi'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"\nSignal workflow succeeded.\n')])])]),e("p",[t._v("Program output:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":53:56.120 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("workflow-root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" INFO  c.u.c.samples.hello.GettingStarted - "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(": Hello World"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":54:57.901 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("workflow-root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" INFO  c.u.c.samples.hello.GettingStarted - "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(": Hi World"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),e("p",[t._v("Try sending the same "),e("Term",{attrs:{term:"signal"}}),t._v(" with the same input again. Note that the output doesn't change. This happens because the await condition\ndoesn't unblock when it sees the same value. But a new greeting unblocks it:")],1),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("cadence: "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --network"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host --rm ubercadence/cli:master --do test-domain workflow signal --workflow_id "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloSignal"')]),t._v(" --name "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloWorld::updateGreeting"')]),t._v(" --input "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"Welcome'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"\nSignal workflow succeeded.\n')])])]),e("p",[t._v("Program output:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":53:56.120 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("workflow-root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" INFO  c.u.c.samples.hello.GettingStarted - "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(": Hello World"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":54:57.901 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("workflow-root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" INFO  c.u.c.samples.hello.GettingStarted - "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(": Hi World"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":56:24.400 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("workflow-root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" INFO  c.u.c.samples.hello.GettingStarted - "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(": Welcome World"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),e("p",[t._v("Now shut down the "),e("Term",{attrs:{term:"worker"}}),t._v(" and send the same "),e("Term",{attrs:{term:"signal"}}),t._v(" again:")],1),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("cadence: "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --network"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host --rm ubercadence/cli:master --do test-domain workflow signal --workflow_id "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloSignal"')]),t._v(" --name "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HelloWorld::updateGreeting"')]),t._v(" --input "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"Welcome'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v('"\nSignal workflow succeeded.\n')])])]),e("p",[t._v("Note that sending "),e("Term",{attrs:{term:"signal",show:"signals"}}),t._v(" as well as starting "),e("Term",{attrs:{term:"workflow",show:"workflows"}}),t._v(" does not need a "),e("Term",{attrs:{term:"worker"}}),t._v(" running. The requests are queued inside the Cadence service.")],1),t._v(" "),e("p",[t._v("Now bring the "),e("Term",{attrs:{term:"worker"}}),t._v(" back. Note that it doesn't log anything besides the standard startup messages.\nThis occurs because it ignores the queued "),e("Term",{attrs:{term:"signal"}}),t._v(" that contains the same input as the current value of greeting.\nNote that the restart of the "),e("Term",{attrs:{term:"worker"}}),t._v(" didn't affect the "),e("Term",{attrs:{term:"workflow_execution"}}),t._v(". It is still blocked on the same line of code as before the failure.\nThis is the most important feature of Cadence. The "),e("Term",{attrs:{term:"workflow"}}),t._v(" code doesn't need to deal with "),e("Term",{attrs:{term:"worker"}}),t._v(" failures at all. Its state is fully recovered to its current state that includes all the local variables and threads.")],1),t._v(" "),e("p",[t._v("Let's look at the line where the "),e("Term",{attrs:{term:"workflow"}}),t._v(" is blocked:")],1),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --network"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host --rm ubercadence/cli:master --do test-domain workflow stack --workflow_id "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello2"')]),t._v("\nQuery result:\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"workflow-root: (BLOCKED on await)\ncom.uber.cadence.internal.sync.SyncDecisionContext.await(SyncDecisionContext.java:546)\ncom.uber.cadence.internal.sync.WorkflowInternal.await(WorkflowInternal.java:243)\ncom.uber.cadence.workflow.Workflow.await(Workflow.java:611)\ncom.uber.cadence.samples.hello.GettingStarted'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$HelloWorldImpl")]),t._v('.sayHello(GettingStarted.java:32)\nsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)"')]),t._v("\n")])])]),e("p",[t._v("Yes, indeed the "),e("Term",{attrs:{term:"workflow"}}),t._v(" is blocked on await. This feature works for any open "),e("Term",{attrs:{term:"workflow"}}),t._v(", greatly simplifying troubleshooting in production.\nLet's complete the "),e("Term",{attrs:{term:"workflow"}}),t._v(" by sending a "),e("Term",{attrs:{term:"signal"}}),t._v(' with a "Bye" greeting:')],1),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":58:22.962 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("workflow-root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" INFO  c.u.c.samples.hello.GettingStarted - "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(": Bye World"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),e("p",[t._v("Note that the value of the count variable was not lost during the restart.")]),t._v(" "),e("p",[t._v("Also note that while a single "),e("Term",{attrs:{term:"worker"}}),t._v(" instance is used for this\nwalkthrough, any real production deployment has multiple "),e("Term",{attrs:{term:"worker"}}),t._v(" instances running. So any "),e("Term",{attrs:{term:"worker"}}),t._v(" failure or restart does not delay any\n"),e("Term",{attrs:{term:"workflow_execution"}}),t._v(" because it is just migrated to any other available "),e("Term",{attrs:{term:"worker"}}),t._v(".")],1),t._v(" "),e("h2",{attrs:{id:"signalwithstart-from-command-line"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#signalwithstart-from-command-line"}},[t._v("#")]),t._v(" SignalWithStart From Command Line")]),t._v(" "),e("p",[t._v("You may not know if a "),e("Term",{attrs:{term:"workflow"}}),t._v(" is running and can accept a "),e("Term",{attrs:{term:"signal"}}),t._v(".\nThe signalWithStart feature allows you to send a "),e("Term",{attrs:{term:"signal"}}),t._v(" to the current "),e("Term",{attrs:{term:"workflow"}}),t._v(" instance if one exists or to create a new\nrun and then send the "),e("Term",{attrs:{term:"signal"}}),t._v(". "),e("code",[t._v("SignalWithStartWorkflow")]),t._v(" therefore doesn't take a "),e("Term",{attrs:{term:"run_ID"}}),t._v(" as a\nparameter.")],1),t._v(" "),e("p",[t._v("Learn more from the "),e("code",[t._v("--help")]),t._v(" manual:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --network"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("host --rm ubercadence/cli:master --do test-domain workflow signalwithstart -h\nNAME:\n   cadence workflow signalwithstart - signal the current "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),t._v(" workflow "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" exists, or attempt to start a new run based on IDResuePolicy and signals it\n\nUSAGE:\n   cadence workflow signalwithstart "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("command options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arguments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),e("h2",{attrs:{id:"signal-from-user-application-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#signal-from-user-application-code"}},[t._v("#")]),t._v(" Signal from user/application code")]),t._v(" "),e("p",[t._v("You may want to signal workflows without running the command line.")]),t._v(" "),e("p",[t._v("The\n"),e("a",{attrs:{href:"https://www.javadoc.io/doc/com.uber.cadence/cadence-client/latest/com/uber/cadence/client/WorkflowClient.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("WorkflowClient"),e("OutboundLink")],1),t._v(" API allows you to send signal (or SignalWithStartWorkflow) from outside of the workflow\nto send a "),e("Term",{attrs:{term:"signal"}}),t._v(" to the current "),e("Term",{attrs:{term:"workflow"}}),t._v(".")],1),t._v(" "),e("p",[t._v("Note that when using "),e("code",[t._v("newWorkflowStub")]),t._v(" to signal a workflow, you MUST NOT passing WorkflowOptions.")]),t._v(" "),e("p",[t._v("The "),e("a",{attrs:{href:"https://www.javadoc.io/static/com.uber.cadence/cadence-client/2.7.9-alpha/com/uber/cadence/client/WorkflowClient.html#newWorkflowStub-java.lang.Class-com.uber.cadence.client.WorkflowOptions-",target:"_blank",rel:"noopener noreferrer"}},[t._v("WorkflowStub"),e("OutboundLink")],1),t._v(" with WorkflowOptions is only for starting workflows.")]),t._v(" "),e("p",[t._v("The "),e("a",{attrs:{href:"https://www.javadoc.io/static/com.uber.cadence/cadence-client/2.7.9-alpha/com/uber/cadence/client/WorkflowClient.html#newWorkflowStub-java.lang.Class-java.lang.String-",target:"_blank",rel:"noopener noreferrer"}},[t._v("WorkflowStub"),e("OutboundLink")],1),t._v(" without WorkflowOptions is for signal or "),e("a",{attrs:{href:"/docs/java-client/queries"}},[t._v("query")])])])}),[],!1,null,null,null);a.default=n.exports}}]);